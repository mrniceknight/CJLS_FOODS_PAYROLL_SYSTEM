#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CJLS_FOODS_PAYROLL_SYSTEM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CJLSFOODSPAYROLL")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttendance(Attendance instance);
    partial void UpdateAttendance(Attendance instance);
    partial void DeleteAttendance(Attendance instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertContribution(Contribution instance);
    partial void UpdateContribution(Contribution instance);
    partial void DeleteContribution(Contribution instance);
    partial void InsertContributionType(ContributionType instance);
    partial void UpdateContributionType(ContributionType instance);
    partial void DeleteContributionType(ContributionType instance);
    partial void InsertDeduction(Deduction instance);
    partial void UpdateDeduction(Deduction instance);
    partial void DeleteDeduction(Deduction instance);
    partial void InsertDeductionsType(DeductionsType instance);
    partial void UpdateDeductionsType(DeductionsType instance);
    partial void DeleteDeductionsType(DeductionsType instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeType(EmployeeType instance);
    partial void UpdateEmployeeType(EmployeeType instance);
    partial void DeleteEmployeeType(EmployeeType instance);
    partial void InsertLeave(Leave instance);
    partial void UpdateLeave(Leave instance);
    partial void DeleteLeave(Leave instance);
    partial void InsertPayroll(Payroll instance);
    partial void UpdatePayroll(Payroll instance);
    partial void DeletePayroll(Payroll instance);
    partial void InsertPayrollDetail(PayrollDetail instance);
    partial void UpdatePayrollDetail(PayrollDetail instance);
    partial void DeletePayrollDetail(PayrollDetail instance);
    partial void InsertPayrollGroup(PayrollGroup instance);
    partial void UpdatePayrollGroup(PayrollGroup instance);
    partial void DeletePayrollGroup(PayrollGroup instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::CJLS_FOODS_PAYROLL_SYSTEM.Properties.Settings.Default.CJLSFOODSPAYROLLConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attendance> Attendances
		{
			get
			{
				return this.GetTable<Attendance>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Contribution> Contributions
		{
			get
			{
				return this.GetTable<Contribution>();
			}
		}
		
		public System.Data.Linq.Table<ContributionType> ContributionTypes
		{
			get
			{
				return this.GetTable<ContributionType>();
			}
		}
		
		public System.Data.Linq.Table<Deduction> Deductions
		{
			get
			{
				return this.GetTable<Deduction>();
			}
		}
		
		public System.Data.Linq.Table<DeductionsType> DeductionsTypes
		{
			get
			{
				return this.GetTable<DeductionsType>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeType> EmployeeTypes
		{
			get
			{
				return this.GetTable<EmployeeType>();
			}
		}
		
		public System.Data.Linq.Table<Leave> Leaves
		{
			get
			{
				return this.GetTable<Leave>();
			}
		}
		
		public System.Data.Linq.Table<Payroll> Payrolls
		{
			get
			{
				return this.GetTable<Payroll>();
			}
		}
		
		public System.Data.Linq.Table<PayrollDetail> PayrollDetails
		{
			get
			{
				return this.GetTable<PayrollDetail>();
			}
		}
		
		public System.Data.Linq.Table<PayrollGroup> PayrollGroups
		{
			get
			{
				return this.GetTable<PayrollGroup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attendance")]
	public partial class Attendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _AttendanceDate;
		
		private double _RegularHoursWorked;
		
		private double _OverTimeHoursWorked;
		
		private int _AttendanceID;
		
		private System.Nullable<int> _PayrollDetailsID;
		
		private double _MinutesLate;
		
		private EntitySet<Deduction> _Deductions;
		
		private EntityRef<PayrollDetail> _PayrollDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttendanceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAttendanceDateChanged();
    partial void OnRegularHoursWorkedChanging(double value);
    partial void OnRegularHoursWorkedChanged();
    partial void OnOverTimeHoursWorkedChanging(double value);
    partial void OnOverTimeHoursWorkedChanged();
    partial void OnAttendanceIDChanging(int value);
    partial void OnAttendanceIDChanged();
    partial void OnPayrollDetailsIDChanging(System.Nullable<int> value);
    partial void OnPayrollDetailsIDChanged();
    partial void OnMinutesLateChanging(double value);
    partial void OnMinutesLateChanged();
    #endregion
		
		public Attendance()
		{
			this._Deductions = new EntitySet<Deduction>(new Action<Deduction>(this.attach_Deductions), new Action<Deduction>(this.detach_Deductions));
			this._PayrollDetail = default(EntityRef<PayrollDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendanceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AttendanceDate
		{
			get
			{
				return this._AttendanceDate;
			}
			set
			{
				if ((this._AttendanceDate != value))
				{
					this.OnAttendanceDateChanging(value);
					this.SendPropertyChanging();
					this._AttendanceDate = value;
					this.SendPropertyChanged("AttendanceDate");
					this.OnAttendanceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularHoursWorked", DbType="Float NOT NULL")]
		public double RegularHoursWorked
		{
			get
			{
				return this._RegularHoursWorked;
			}
			set
			{
				if ((this._RegularHoursWorked != value))
				{
					this.OnRegularHoursWorkedChanging(value);
					this.SendPropertyChanging();
					this._RegularHoursWorked = value;
					this.SendPropertyChanged("RegularHoursWorked");
					this.OnRegularHoursWorkedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverTimeHoursWorked", DbType="Float NOT NULL")]
		public double OverTimeHoursWorked
		{
			get
			{
				return this._OverTimeHoursWorked;
			}
			set
			{
				if ((this._OverTimeHoursWorked != value))
				{
					this.OnOverTimeHoursWorkedChanging(value);
					this.SendPropertyChanging();
					this._OverTimeHoursWorked = value;
					this.SendPropertyChanged("OverTimeHoursWorked");
					this.OnOverTimeHoursWorkedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttendanceID
		{
			get
			{
				return this._AttendanceID;
			}
			set
			{
				if ((this._AttendanceID != value))
				{
					this.OnAttendanceIDChanging(value);
					this.SendPropertyChanging();
					this._AttendanceID = value;
					this.SendPropertyChanged("AttendanceID");
					this.OnAttendanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayrollDetailsID", DbType="Int")]
		public System.Nullable<int> PayrollDetailsID
		{
			get
			{
				return this._PayrollDetailsID;
			}
			set
			{
				if ((this._PayrollDetailsID != value))
				{
					if (this._PayrollDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayrollDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._PayrollDetailsID = value;
					this.SendPropertyChanged("PayrollDetailsID");
					this.OnPayrollDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinutesLate", DbType="Float NOT NULL")]
		public double MinutesLate
		{
			get
			{
				return this._MinutesLate;
			}
			set
			{
				if ((this._MinutesLate != value))
				{
					this.OnMinutesLateChanging(value);
					this.SendPropertyChanging();
					this._MinutesLate = value;
					this.SendPropertyChanged("MinutesLate");
					this.OnMinutesLateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attendance_Deduction", Storage="_Deductions", ThisKey="AttendanceID", OtherKey="AttendanceID")]
		public EntitySet<Deduction> Deductions
		{
			get
			{
				return this._Deductions;
			}
			set
			{
				this._Deductions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayrollDetail_Attendance", Storage="_PayrollDetail", ThisKey="PayrollDetailsID", OtherKey="PayrollDetailID", IsForeignKey=true)]
		public PayrollDetail PayrollDetail
		{
			get
			{
				return this._PayrollDetail.Entity;
			}
			set
			{
				PayrollDetail previousValue = this._PayrollDetail.Entity;
				if (((previousValue != value) 
							|| (this._PayrollDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayrollDetail.Entity = null;
						previousValue.Attendances.Remove(this);
					}
					this._PayrollDetail.Entity = value;
					if ((value != null))
					{
						value.Attendances.Add(this);
						this._PayrollDetailsID = value.PayrollDetailID;
					}
					else
					{
						this._PayrollDetailsID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PayrollDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Deductions(Deduction entity)
		{
			this.SendPropertyChanging();
			entity.Attendance = this;
		}
		
		private void detach_Deductions(Deduction entity)
		{
			this.SendPropertyChanging();
			entity.Attendance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _FullName;
		
		private string _Username;
		
		private string _Password;
		
		private string _SecretQuestion;
		
		private string _SecretAnswer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSecretQuestionChanging(string value);
    partial void OnSecretQuestionChanged();
    partial void OnSecretAnswerChanging(string value);
    partial void OnSecretAnswerChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecretQuestion", DbType="VarChar(50)")]
		public string SecretQuestion
		{
			get
			{
				return this._SecretQuestion;
			}
			set
			{
				if ((this._SecretQuestion != value))
				{
					this.OnSecretQuestionChanging(value);
					this.SendPropertyChanging();
					this._SecretQuestion = value;
					this.SendPropertyChanged("SecretQuestion");
					this.OnSecretQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecretAnswer", DbType="VarChar(50)")]
		public string SecretAnswer
		{
			get
			{
				return this._SecretAnswer;
			}
			set
			{
				if ((this._SecretAnswer != value))
				{
					this.OnSecretAnswerChanging(value);
					this.SendPropertyChanging();
					this._SecretAnswer = value;
					this.SendPropertyChanged("SecretAnswer");
					this.OnSecretAnswerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contribution")]
	public partial class Contribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContributionLogID;
		
		private System.Nullable<int> _ContributionTypeID;
		
		private System.Nullable<int> _PayrollDetailID;
		
		private EntityRef<ContributionType> _ContributionType;
		
		private EntityRef<PayrollDetail> _PayrollDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContributionLogIDChanging(int value);
    partial void OnContributionLogIDChanged();
    partial void OnContributionTypeIDChanging(System.Nullable<int> value);
    partial void OnContributionTypeIDChanged();
    partial void OnPayrollDetailIDChanging(System.Nullable<int> value);
    partial void OnPayrollDetailIDChanged();
    #endregion
		
		public Contribution()
		{
			this._ContributionType = default(EntityRef<ContributionType>);
			this._PayrollDetail = default(EntityRef<PayrollDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContributionLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContributionLogID
		{
			get
			{
				return this._ContributionLogID;
			}
			set
			{
				if ((this._ContributionLogID != value))
				{
					this.OnContributionLogIDChanging(value);
					this.SendPropertyChanging();
					this._ContributionLogID = value;
					this.SendPropertyChanged("ContributionLogID");
					this.OnContributionLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContributionTypeID", DbType="Int")]
		public System.Nullable<int> ContributionTypeID
		{
			get
			{
				return this._ContributionTypeID;
			}
			set
			{
				if ((this._ContributionTypeID != value))
				{
					if (this._ContributionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContributionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContributionTypeID = value;
					this.SendPropertyChanged("ContributionTypeID");
					this.OnContributionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayrollDetailID", DbType="Int")]
		public System.Nullable<int> PayrollDetailID
		{
			get
			{
				return this._PayrollDetailID;
			}
			set
			{
				if ((this._PayrollDetailID != value))
				{
					if (this._PayrollDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayrollDetailIDChanging(value);
					this.SendPropertyChanging();
					this._PayrollDetailID = value;
					this.SendPropertyChanged("PayrollDetailID");
					this.OnPayrollDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContributionType_Contribution", Storage="_ContributionType", ThisKey="ContributionTypeID", OtherKey="ContributionTypeID", IsForeignKey=true)]
		public ContributionType ContributionType
		{
			get
			{
				return this._ContributionType.Entity;
			}
			set
			{
				ContributionType previousValue = this._ContributionType.Entity;
				if (((previousValue != value) 
							|| (this._ContributionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContributionType.Entity = null;
						previousValue.Contributions.Remove(this);
					}
					this._ContributionType.Entity = value;
					if ((value != null))
					{
						value.Contributions.Add(this);
						this._ContributionTypeID = value.ContributionTypeID;
					}
					else
					{
						this._ContributionTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ContributionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayrollDetail_Contribution", Storage="_PayrollDetail", ThisKey="PayrollDetailID", OtherKey="PayrollDetailID", IsForeignKey=true)]
		public PayrollDetail PayrollDetail
		{
			get
			{
				return this._PayrollDetail.Entity;
			}
			set
			{
				PayrollDetail previousValue = this._PayrollDetail.Entity;
				if (((previousValue != value) 
							|| (this._PayrollDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayrollDetail.Entity = null;
						previousValue.Contributions.Remove(this);
					}
					this._PayrollDetail.Entity = value;
					if ((value != null))
					{
						value.Contributions.Add(this);
						this._PayrollDetailID = value.PayrollDetailID;
					}
					else
					{
						this._PayrollDetailID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PayrollDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContributionType")]
	public partial class ContributionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContributionTypeID;
		
		private string _Name;
		
		private System.Nullable<double> _PercentageRate;
		
		private EntitySet<Contribution> _Contributions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContributionTypeIDChanging(int value);
    partial void OnContributionTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPercentageRateChanging(System.Nullable<double> value);
    partial void OnPercentageRateChanged();
    #endregion
		
		public ContributionType()
		{
			this._Contributions = new EntitySet<Contribution>(new Action<Contribution>(this.attach_Contributions), new Action<Contribution>(this.detach_Contributions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContributionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContributionTypeID
		{
			get
			{
				return this._ContributionTypeID;
			}
			set
			{
				if ((this._ContributionTypeID != value))
				{
					this.OnContributionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContributionTypeID = value;
					this.SendPropertyChanged("ContributionTypeID");
					this.OnContributionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentageRate", DbType="Float")]
		public System.Nullable<double> PercentageRate
		{
			get
			{
				return this._PercentageRate;
			}
			set
			{
				if ((this._PercentageRate != value))
				{
					this.OnPercentageRateChanging(value);
					this.SendPropertyChanging();
					this._PercentageRate = value;
					this.SendPropertyChanged("PercentageRate");
					this.OnPercentageRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContributionType_Contribution", Storage="_Contributions", ThisKey="ContributionTypeID", OtherKey="ContributionTypeID")]
		public EntitySet<Contribution> Contributions
		{
			get
			{
				return this._Contributions;
			}
			set
			{
				this._Contributions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.ContributionType = this;
		}
		
		private void detach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.ContributionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Deduction")]
	public partial class Deduction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeductionsLogId;
		
		private System.Nullable<int> _DeductionTypeID;
		
		private double _Amount;
		
		private System.Nullable<int> _AttendanceID;
		
		private EntityRef<Attendance> _Attendance;
		
		private EntityRef<DeductionsType> _DeductionsType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeductionsLogIdChanging(int value);
    partial void OnDeductionsLogIdChanged();
    partial void OnDeductionTypeIDChanging(System.Nullable<int> value);
    partial void OnDeductionTypeIDChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnAttendanceIDChanging(System.Nullable<int> value);
    partial void OnAttendanceIDChanged();
    #endregion
		
		public Deduction()
		{
			this._Attendance = default(EntityRef<Attendance>);
			this._DeductionsType = default(EntityRef<DeductionsType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeductionsLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeductionsLogId
		{
			get
			{
				return this._DeductionsLogId;
			}
			set
			{
				if ((this._DeductionsLogId != value))
				{
					this.OnDeductionsLogIdChanging(value);
					this.SendPropertyChanging();
					this._DeductionsLogId = value;
					this.SendPropertyChanged("DeductionsLogId");
					this.OnDeductionsLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeductionTypeID", DbType="Int")]
		public System.Nullable<int> DeductionTypeID
		{
			get
			{
				return this._DeductionTypeID;
			}
			set
			{
				if ((this._DeductionTypeID != value))
				{
					if (this._DeductionsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DeductionTypeID = value;
					this.SendPropertyChanged("DeductionTypeID");
					this.OnDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendanceID", DbType="Int")]
		public System.Nullable<int> AttendanceID
		{
			get
			{
				return this._AttendanceID;
			}
			set
			{
				if ((this._AttendanceID != value))
				{
					if (this._Attendance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttendanceIDChanging(value);
					this.SendPropertyChanging();
					this._AttendanceID = value;
					this.SendPropertyChanged("AttendanceID");
					this.OnAttendanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attendance_Deduction", Storage="_Attendance", ThisKey="AttendanceID", OtherKey="AttendanceID", IsForeignKey=true)]
		public Attendance Attendance
		{
			get
			{
				return this._Attendance.Entity;
			}
			set
			{
				Attendance previousValue = this._Attendance.Entity;
				if (((previousValue != value) 
							|| (this._Attendance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attendance.Entity = null;
						previousValue.Deductions.Remove(this);
					}
					this._Attendance.Entity = value;
					if ((value != null))
					{
						value.Deductions.Add(this);
						this._AttendanceID = value.AttendanceID;
					}
					else
					{
						this._AttendanceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Attendance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeductionsType_Deduction", Storage="_DeductionsType", ThisKey="DeductionTypeID", OtherKey="DeductionTypeID", IsForeignKey=true)]
		public DeductionsType DeductionsType
		{
			get
			{
				return this._DeductionsType.Entity;
			}
			set
			{
				DeductionsType previousValue = this._DeductionsType.Entity;
				if (((previousValue != value) 
							|| (this._DeductionsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeductionsType.Entity = null;
						previousValue.Deductions.Remove(this);
					}
					this._DeductionsType.Entity = value;
					if ((value != null))
					{
						value.Deductions.Add(this);
						this._DeductionTypeID = value.DeductionTypeID;
					}
					else
					{
						this._DeductionTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DeductionsType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeductionsTypes")]
	public partial class DeductionsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeductionTypeID;
		
		private string _Name;
		
		private string _DeductionReferenceId;
		
		private EntitySet<Deduction> _Deductions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeductionTypeIDChanging(int value);
    partial void OnDeductionTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDeductionReferenceIdChanging(string value);
    partial void OnDeductionReferenceIdChanged();
    #endregion
		
		public DeductionsType()
		{
			this._Deductions = new EntitySet<Deduction>(new Action<Deduction>(this.attach_Deductions), new Action<Deduction>(this.detach_Deductions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeductionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeductionTypeID
		{
			get
			{
				return this._DeductionTypeID;
			}
			set
			{
				if ((this._DeductionTypeID != value))
				{
					this.OnDeductionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DeductionTypeID = value;
					this.SendPropertyChanged("DeductionTypeID");
					this.OnDeductionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeductionReferenceId", DbType="VarChar(50)")]
		public string DeductionReferenceId
		{
			get
			{
				return this._DeductionReferenceId;
			}
			set
			{
				if ((this._DeductionReferenceId != value))
				{
					this.OnDeductionReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._DeductionReferenceId = value;
					this.SendPropertyChanged("DeductionReferenceId");
					this.OnDeductionReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeductionsType_Deduction", Storage="_Deductions", ThisKey="DeductionTypeID", OtherKey="DeductionTypeID")]
		public EntitySet<Deduction> Deductions
		{
			get
			{
				return this._Deductions;
			}
			set
			{
				this._Deductions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Deductions(Deduction entity)
		{
			this.SendPropertyChanging();
			entity.DeductionsType = this;
		}
		
		private void detach_Deductions(Deduction entity)
		{
			this.SendPropertyChanging();
			entity.DeductionsType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private System.Nullable<int> _EmployeeGroupID;
		
		private System.Nullable<int> _EmployeeTypeID;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Gender;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _ContactNumber;
		
		private string _Address;
		
		private System.Nullable<int> _AvailableLeaves;
		
		private double _HourlyRate;
		
		private double _DailyRequiredHours;
		
		private double _MonthlySalary;
		
		private string _SSSID;
		
		private string _PagIbigID;
		
		private string _PhilhealthID;
		
		private string _TINID;
		
		private string _Branch;
		
		private string _Status;
		
		private System.Nullable<bool> _IsPhilhealthActive;
		
		private System.Nullable<bool> _IsSSSActive;
		
		private System.Nullable<bool> _IsIncomeTaxActive;
		
		private System.Nullable<bool> _IsPagibigActive;
		
		private System.Nullable<int> _Age;
		
		private EntitySet<Leave> _Leaves;
		
		private EntitySet<PayrollDetail> _PayrollDetails;
		
		private EntityRef<EmployeeType> _EmployeeType;
		
		private EntityRef<PayrollGroup> _PayrollGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeGroupIDChanging(System.Nullable<int> value);
    partial void OnEmployeeGroupIDChanged();
    partial void OnEmployeeTypeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeTypeIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAvailableLeavesChanging(System.Nullable<int> value);
    partial void OnAvailableLeavesChanged();
    partial void OnHourlyRateChanging(double value);
    partial void OnHourlyRateChanged();
    partial void OnDailyRequiredHoursChanging(double value);
    partial void OnDailyRequiredHoursChanged();
    partial void OnMonthlySalaryChanging(double value);
    partial void OnMonthlySalaryChanged();
    partial void OnSSSIDChanging(string value);
    partial void OnSSSIDChanged();
    partial void OnPagIbigIDChanging(string value);
    partial void OnPagIbigIDChanged();
    partial void OnPhilhealthIDChanging(string value);
    partial void OnPhilhealthIDChanged();
    partial void OnTINIDChanging(string value);
    partial void OnTINIDChanged();
    partial void OnBranchChanging(string value);
    partial void OnBranchChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnIsPhilhealthActiveChanging(System.Nullable<bool> value);
    partial void OnIsPhilhealthActiveChanged();
    partial void OnIsSSSActiveChanging(System.Nullable<bool> value);
    partial void OnIsSSSActiveChanged();
    partial void OnIsIncomeTaxActiveChanging(System.Nullable<bool> value);
    partial void OnIsIncomeTaxActiveChanged();
    partial void OnIsPagibigActiveChanging(System.Nullable<bool> value);
    partial void OnIsPagibigActiveChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    #endregion
		
		public Employee()
		{
			this._Leaves = new EntitySet<Leave>(new Action<Leave>(this.attach_Leaves), new Action<Leave>(this.detach_Leaves));
			this._PayrollDetails = new EntitySet<PayrollDetail>(new Action<PayrollDetail>(this.attach_PayrollDetails), new Action<PayrollDetail>(this.detach_PayrollDetails));
			this._EmployeeType = default(EntityRef<EmployeeType>);
			this._PayrollGroup = default(EntityRef<PayrollGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeGroupID", DbType="Int")]
		public System.Nullable<int> EmployeeGroupID
		{
			get
			{
				return this._EmployeeGroupID;
			}
			set
			{
				if ((this._EmployeeGroupID != value))
				{
					if (this._PayrollGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeGroupIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeGroupID = value;
					this.SendPropertyChanged("EmployeeGroupID");
					this.OnEmployeeGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTypeID", DbType="Int")]
		public System.Nullable<int> EmployeeTypeID
		{
			get
			{
				return this._EmployeeTypeID;
			}
			set
			{
				if ((this._EmployeeTypeID != value))
				{
					if (this._EmployeeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTypeID = value;
					this.SendPropertyChanged("EmployeeTypeID");
					this.OnEmployeeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(25)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(50)")]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableLeaves", DbType="Int")]
		public System.Nullable<int> AvailableLeaves
		{
			get
			{
				return this._AvailableLeaves;
			}
			set
			{
				if ((this._AvailableLeaves != value))
				{
					this.OnAvailableLeavesChanging(value);
					this.SendPropertyChanging();
					this._AvailableLeaves = value;
					this.SendPropertyChanged("AvailableLeaves");
					this.OnAvailableLeavesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourlyRate", DbType="Float NOT NULL")]
		public double HourlyRate
		{
			get
			{
				return this._HourlyRate;
			}
			set
			{
				if ((this._HourlyRate != value))
				{
					this.OnHourlyRateChanging(value);
					this.SendPropertyChanging();
					this._HourlyRate = value;
					this.SendPropertyChanged("HourlyRate");
					this.OnHourlyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyRequiredHours", DbType="Float NOT NULL")]
		public double DailyRequiredHours
		{
			get
			{
				return this._DailyRequiredHours;
			}
			set
			{
				if ((this._DailyRequiredHours != value))
				{
					this.OnDailyRequiredHoursChanging(value);
					this.SendPropertyChanging();
					this._DailyRequiredHours = value;
					this.SendPropertyChanged("DailyRequiredHours");
					this.OnDailyRequiredHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthlySalary", AutoSync=AutoSync.Always, DbType="Float NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public double MonthlySalary
		{
			get
			{
				return this._MonthlySalary;
			}
			set
			{
				if ((this._MonthlySalary != value))
				{
					this.OnMonthlySalaryChanging(value);
					this.SendPropertyChanging();
					this._MonthlySalary = value;
					this.SendPropertyChanged("MonthlySalary");
					this.OnMonthlySalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSSID", DbType="VarChar(50)")]
		public string SSSID
		{
			get
			{
				return this._SSSID;
			}
			set
			{
				if ((this._SSSID != value))
				{
					this.OnSSSIDChanging(value);
					this.SendPropertyChanging();
					this._SSSID = value;
					this.SendPropertyChanged("SSSID");
					this.OnSSSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PagIbigID", DbType="VarChar(50)")]
		public string PagIbigID
		{
			get
			{
				return this._PagIbigID;
			}
			set
			{
				if ((this._PagIbigID != value))
				{
					this.OnPagIbigIDChanging(value);
					this.SendPropertyChanging();
					this._PagIbigID = value;
					this.SendPropertyChanged("PagIbigID");
					this.OnPagIbigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhilhealthID", DbType="VarChar(50)")]
		public string PhilhealthID
		{
			get
			{
				return this._PhilhealthID;
			}
			set
			{
				if ((this._PhilhealthID != value))
				{
					this.OnPhilhealthIDChanging(value);
					this.SendPropertyChanging();
					this._PhilhealthID = value;
					this.SendPropertyChanged("PhilhealthID");
					this.OnPhilhealthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TINID", DbType="VarChar(50)")]
		public string TINID
		{
			get
			{
				return this._TINID;
			}
			set
			{
				if ((this._TINID != value))
				{
					this.OnTINIDChanging(value);
					this.SendPropertyChanging();
					this._TINID = value;
					this.SendPropertyChanged("TINID");
					this.OnTINIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch", DbType="VarChar(50)")]
		public string Branch
		{
			get
			{
				return this._Branch;
			}
			set
			{
				if ((this._Branch != value))
				{
					this.OnBranchChanging(value);
					this.SendPropertyChanging();
					this._Branch = value;
					this.SendPropertyChanged("Branch");
					this.OnBranchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPhilhealthActive", DbType="Bit")]
		public System.Nullable<bool> IsPhilhealthActive
		{
			get
			{
				return this._IsPhilhealthActive;
			}
			set
			{
				if ((this._IsPhilhealthActive != value))
				{
					this.OnIsPhilhealthActiveChanging(value);
					this.SendPropertyChanging();
					this._IsPhilhealthActive = value;
					this.SendPropertyChanged("IsPhilhealthActive");
					this.OnIsPhilhealthActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSSSActive", DbType="Bit")]
		public System.Nullable<bool> IsSSSActive
		{
			get
			{
				return this._IsSSSActive;
			}
			set
			{
				if ((this._IsSSSActive != value))
				{
					this.OnIsSSSActiveChanging(value);
					this.SendPropertyChanging();
					this._IsSSSActive = value;
					this.SendPropertyChanged("IsSSSActive");
					this.OnIsSSSActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIncomeTaxActive", DbType="Bit")]
		public System.Nullable<bool> IsIncomeTaxActive
		{
			get
			{
				return this._IsIncomeTaxActive;
			}
			set
			{
				if ((this._IsIncomeTaxActive != value))
				{
					this.OnIsIncomeTaxActiveChanging(value);
					this.SendPropertyChanging();
					this._IsIncomeTaxActive = value;
					this.SendPropertyChanged("IsIncomeTaxActive");
					this.OnIsIncomeTaxActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPagibigActive", DbType="Bit")]
		public System.Nullable<bool> IsPagibigActive
		{
			get
			{
				return this._IsPagibigActive;
			}
			set
			{
				if ((this._IsPagibigActive != value))
				{
					this.OnIsPagibigActiveChanging(value);
					this.SendPropertyChanging();
					this._IsPagibigActive = value;
					this.SendPropertyChanged("IsPagibigActive");
					this.OnIsPagibigActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Leave", Storage="_Leaves", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Leave> Leaves
		{
			get
			{
				return this._Leaves;
			}
			set
			{
				this._Leaves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PayrollDetail", Storage="_PayrollDetails", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<PayrollDetail> PayrollDetails
		{
			get
			{
				return this._PayrollDetails;
			}
			set
			{
				this._PayrollDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Employee", Storage="_EmployeeType", ThisKey="EmployeeTypeID", OtherKey="EmployeeTypesID", IsForeignKey=true)]
		public EmployeeType EmployeeType
		{
			get
			{
				return this._EmployeeType.Entity;
			}
			set
			{
				EmployeeType previousValue = this._EmployeeType.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeType.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._EmployeeType.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._EmployeeTypeID = value.EmployeeTypesID;
					}
					else
					{
						this._EmployeeTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmployeeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayrollGroup_Employee", Storage="_PayrollGroup", ThisKey="EmployeeGroupID", OtherKey="PayrollGroupID", IsForeignKey=true)]
		public PayrollGroup PayrollGroup
		{
			get
			{
				return this._PayrollGroup.Entity;
			}
			set
			{
				PayrollGroup previousValue = this._PayrollGroup.Entity;
				if (((previousValue != value) 
							|| (this._PayrollGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayrollGroup.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._PayrollGroup.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._EmployeeGroupID = value.PayrollGroupID;
					}
					else
					{
						this._EmployeeGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PayrollGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Leaves(Leave entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Leaves(Leave entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PayrollDetails(PayrollDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PayrollDetails(PayrollDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeTypes")]
	public partial class EmployeeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeTypesID;
		
		private string _EmployeeNameTitle;
		
		private System.Nullable<double> _HourlyRate;
		
		private System.Nullable<double> _DailyRequiredHours;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeTypesIDChanging(int value);
    partial void OnEmployeeTypesIDChanged();
    partial void OnEmployeeNameTitleChanging(string value);
    partial void OnEmployeeNameTitleChanged();
    partial void OnHourlyRateChanging(System.Nullable<double> value);
    partial void OnHourlyRateChanged();
    partial void OnDailyRequiredHoursChanging(System.Nullable<double> value);
    partial void OnDailyRequiredHoursChanged();
    #endregion
		
		public EmployeeType()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTypesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeTypesID
		{
			get
			{
				return this._EmployeeTypesID;
			}
			set
			{
				if ((this._EmployeeTypesID != value))
				{
					this.OnEmployeeTypesIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTypesID = value;
					this.SendPropertyChanged("EmployeeTypesID");
					this.OnEmployeeTypesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeNameTitle", DbType="VarChar(50)")]
		public string EmployeeNameTitle
		{
			get
			{
				return this._EmployeeNameTitle;
			}
			set
			{
				if ((this._EmployeeNameTitle != value))
				{
					this.OnEmployeeNameTitleChanging(value);
					this.SendPropertyChanging();
					this._EmployeeNameTitle = value;
					this.SendPropertyChanged("EmployeeNameTitle");
					this.OnEmployeeNameTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourlyRate", DbType="Float")]
		public System.Nullable<double> HourlyRate
		{
			get
			{
				return this._HourlyRate;
			}
			set
			{
				if ((this._HourlyRate != value))
				{
					this.OnHourlyRateChanging(value);
					this.SendPropertyChanging();
					this._HourlyRate = value;
					this.SendPropertyChanged("HourlyRate");
					this.OnHourlyRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyRequiredHours", DbType="Float")]
		public System.Nullable<double> DailyRequiredHours
		{
			get
			{
				return this._DailyRequiredHours;
			}
			set
			{
				if ((this._DailyRequiredHours != value))
				{
					this.OnDailyRequiredHoursChanging(value);
					this.SendPropertyChanging();
					this._DailyRequiredHours = value;
					this.SendPropertyChanged("DailyRequiredHours");
					this.OnDailyRequiredHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Employee", Storage="_Employees", ThisKey="EmployeeTypesID", OtherKey="EmployeeTypeID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Leave")]
	public partial class Leave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _LeaveDate;
		
		private System.Nullable<int> _EmployeeID;
		
		private int _LeaveID;
		
		private System.Nullable<bool> _ApprovalStatus;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeaveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLeaveDateChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnLeaveIDChanging(int value);
    partial void OnLeaveIDChanged();
    partial void OnApprovalStatusChanging(System.Nullable<bool> value);
    partial void OnApprovalStatusChanged();
    #endregion
		
		public Leave()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LeaveDate
		{
			get
			{
				return this._LeaveDate;
			}
			set
			{
				if ((this._LeaveDate != value))
				{
					this.OnLeaveDateChanging(value);
					this.SendPropertyChanging();
					this._LeaveDate = value;
					this.SendPropertyChanged("LeaveDate");
					this.OnLeaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaveID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeaveID
		{
			get
			{
				return this._LeaveID;
			}
			set
			{
				if ((this._LeaveID != value))
				{
					this.OnLeaveIDChanging(value);
					this.SendPropertyChanging();
					this._LeaveID = value;
					this.SendPropertyChanged("LeaveID");
					this.OnLeaveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalStatus", DbType="Bit")]
		public System.Nullable<bool> ApprovalStatus
		{
			get
			{
				return this._ApprovalStatus;
			}
			set
			{
				if ((this._ApprovalStatus != value))
				{
					this.OnApprovalStatusChanging(value);
					this.SendPropertyChanging();
					this._ApprovalStatus = value;
					this.SendPropertyChanged("ApprovalStatus");
					this.OnApprovalStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Leave", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Leaves.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Leaves.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payroll")]
	public partial class Payroll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PayrollID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private System.Nullable<int> _PayrollGroupID;
		
		private EntitySet<PayrollDetail> _PayrollDetails;
		
		private EntityRef<PayrollGroup> _PayrollGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayrollIDChanging(int value);
    partial void OnPayrollIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnPayrollGroupIDChanging(System.Nullable<int> value);
    partial void OnPayrollGroupIDChanged();
    #endregion
		
		public Payroll()
		{
			this._PayrollDetails = new EntitySet<PayrollDetail>(new Action<PayrollDetail>(this.attach_PayrollDetails), new Action<PayrollDetail>(this.detach_PayrollDetails));
			this._PayrollGroup = default(EntityRef<PayrollGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayrollID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PayrollID
		{
			get
			{
				return this._PayrollID;
			}
			set
			{
				if ((this._PayrollID != value))
				{
					this.OnPayrollIDChanging(value);
					this.SendPropertyChanging();
					this._PayrollID = value;
					this.SendPropertyChanged("PayrollID");
					this.OnPayrollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayrollGroupID", DbType="Int")]
		public System.Nullable<int> PayrollGroupID
		{
			get
			{
				return this._PayrollGroupID;
			}
			set
			{
				if ((this._PayrollGroupID != value))
				{
					if (this._PayrollGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayrollGroupIDChanging(value);
					this.SendPropertyChanging();
					this._PayrollGroupID = value;
					this.SendPropertyChanged("PayrollGroupID");
					this.OnPayrollGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payroll_PayrollDetail", Storage="_PayrollDetails", ThisKey="PayrollID", OtherKey="PayrollID")]
		public EntitySet<PayrollDetail> PayrollDetails
		{
			get
			{
				return this._PayrollDetails;
			}
			set
			{
				this._PayrollDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayrollGroup_Payroll", Storage="_PayrollGroup", ThisKey="PayrollGroupID", OtherKey="PayrollGroupID", IsForeignKey=true)]
		public PayrollGroup PayrollGroup
		{
			get
			{
				return this._PayrollGroup.Entity;
			}
			set
			{
				PayrollGroup previousValue = this._PayrollGroup.Entity;
				if (((previousValue != value) 
							|| (this._PayrollGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayrollGroup.Entity = null;
						previousValue.Payrolls.Remove(this);
					}
					this._PayrollGroup.Entity = value;
					if ((value != null))
					{
						value.Payrolls.Add(this);
						this._PayrollGroupID = value.PayrollGroupID;
					}
					else
					{
						this._PayrollGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PayrollGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PayrollDetails(PayrollDetail entity)
		{
			this.SendPropertyChanging();
			entity.Payroll = this;
		}
		
		private void detach_PayrollDetails(PayrollDetail entity)
		{
			this.SendPropertyChanging();
			entity.Payroll = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayrollDetail")]
	public partial class PayrollDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PayrollDetailID;
		
		private System.Nullable<int> _PayrollID;
		
		private System.Nullable<int> _EmployeeID;
		
		private double _TotalDeductions;
		
		private double _TotalContributions;
		
		private double _TotalRegularHours;
		
		private double _TotalOverTimeHours;
		
		private double _OvertimePay;
		
		private double _NetPay;
		
		private double _GrossPay;
		
		private EntitySet<Attendance> _Attendances;
		
		private EntitySet<Contribution> _Contributions;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Payroll> _Payroll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayrollDetailIDChanging(int value);
    partial void OnPayrollDetailIDChanged();
    partial void OnPayrollIDChanging(System.Nullable<int> value);
    partial void OnPayrollIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnTotalDeductionsChanging(double value);
    partial void OnTotalDeductionsChanged();
    partial void OnTotalContributionsChanging(double value);
    partial void OnTotalContributionsChanged();
    partial void OnTotalRegularHoursChanging(double value);
    partial void OnTotalRegularHoursChanged();
    partial void OnTotalOverTimeHoursChanging(double value);
    partial void OnTotalOverTimeHoursChanged();
    partial void OnOvertimePayChanging(double value);
    partial void OnOvertimePayChanged();
    partial void OnNetPayChanging(double value);
    partial void OnNetPayChanged();
    partial void OnGrossPayChanging(double value);
    partial void OnGrossPayChanged();
    #endregion
		
		public PayrollDetail()
		{
			this._Attendances = new EntitySet<Attendance>(new Action<Attendance>(this.attach_Attendances), new Action<Attendance>(this.detach_Attendances));
			this._Contributions = new EntitySet<Contribution>(new Action<Contribution>(this.attach_Contributions), new Action<Contribution>(this.detach_Contributions));
			this._Employee = default(EntityRef<Employee>);
			this._Payroll = default(EntityRef<Payroll>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayrollDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PayrollDetailID
		{
			get
			{
				return this._PayrollDetailID;
			}
			set
			{
				if ((this._PayrollDetailID != value))
				{
					this.OnPayrollDetailIDChanging(value);
					this.SendPropertyChanging();
					this._PayrollDetailID = value;
					this.SendPropertyChanged("PayrollDetailID");
					this.OnPayrollDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayrollID", DbType="Int")]
		public System.Nullable<int> PayrollID
		{
			get
			{
				return this._PayrollID;
			}
			set
			{
				if ((this._PayrollID != value))
				{
					if (this._Payroll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayrollIDChanging(value);
					this.SendPropertyChanging();
					this._PayrollID = value;
					this.SendPropertyChanged("PayrollID");
					this.OnPayrollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDeductions", DbType="Float NOT NULL")]
		public double TotalDeductions
		{
			get
			{
				return this._TotalDeductions;
			}
			set
			{
				if ((this._TotalDeductions != value))
				{
					this.OnTotalDeductionsChanging(value);
					this.SendPropertyChanging();
					this._TotalDeductions = value;
					this.SendPropertyChanged("TotalDeductions");
					this.OnTotalDeductionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalContributions", DbType="Float NOT NULL")]
		public double TotalContributions
		{
			get
			{
				return this._TotalContributions;
			}
			set
			{
				if ((this._TotalContributions != value))
				{
					this.OnTotalContributionsChanging(value);
					this.SendPropertyChanging();
					this._TotalContributions = value;
					this.SendPropertyChanged("TotalContributions");
					this.OnTotalContributionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalRegularHours", DbType="Float NOT NULL")]
		public double TotalRegularHours
		{
			get
			{
				return this._TotalRegularHours;
			}
			set
			{
				if ((this._TotalRegularHours != value))
				{
					this.OnTotalRegularHoursChanging(value);
					this.SendPropertyChanging();
					this._TotalRegularHours = value;
					this.SendPropertyChanged("TotalRegularHours");
					this.OnTotalRegularHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalOverTimeHours", DbType="Float NOT NULL")]
		public double TotalOverTimeHours
		{
			get
			{
				return this._TotalOverTimeHours;
			}
			set
			{
				if ((this._TotalOverTimeHours != value))
				{
					this.OnTotalOverTimeHoursChanging(value);
					this.SendPropertyChanging();
					this._TotalOverTimeHours = value;
					this.SendPropertyChanged("TotalOverTimeHours");
					this.OnTotalOverTimeHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OvertimePay", DbType="Float NOT NULL")]
		public double OvertimePay
		{
			get
			{
				return this._OvertimePay;
			}
			set
			{
				if ((this._OvertimePay != value))
				{
					this.OnOvertimePayChanging(value);
					this.SendPropertyChanging();
					this._OvertimePay = value;
					this.SendPropertyChanged("OvertimePay");
					this.OnOvertimePayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetPay", DbType="Float NOT NULL")]
		public double NetPay
		{
			get
			{
				return this._NetPay;
			}
			set
			{
				if ((this._NetPay != value))
				{
					this.OnNetPayChanging(value);
					this.SendPropertyChanging();
					this._NetPay = value;
					this.SendPropertyChanged("NetPay");
					this.OnNetPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrossPay", DbType="Float NOT NULL")]
		public double GrossPay
		{
			get
			{
				return this._GrossPay;
			}
			set
			{
				if ((this._GrossPay != value))
				{
					this.OnGrossPayChanging(value);
					this.SendPropertyChanging();
					this._GrossPay = value;
					this.SendPropertyChanged("GrossPay");
					this.OnGrossPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayrollDetail_Attendance", Storage="_Attendances", ThisKey="PayrollDetailID", OtherKey="PayrollDetailsID")]
		public EntitySet<Attendance> Attendances
		{
			get
			{
				return this._Attendances;
			}
			set
			{
				this._Attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayrollDetail_Contribution", Storage="_Contributions", ThisKey="PayrollDetailID", OtherKey="PayrollDetailID")]
		public EntitySet<Contribution> Contributions
		{
			get
			{
				return this._Contributions;
			}
			set
			{
				this._Contributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PayrollDetail", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PayrollDetails.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PayrollDetails.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payroll_PayrollDetail", Storage="_Payroll", ThisKey="PayrollID", OtherKey="PayrollID", IsForeignKey=true)]
		public Payroll Payroll
		{
			get
			{
				return this._Payroll.Entity;
			}
			set
			{
				Payroll previousValue = this._Payroll.Entity;
				if (((previousValue != value) 
							|| (this._Payroll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payroll.Entity = null;
						previousValue.PayrollDetails.Remove(this);
					}
					this._Payroll.Entity = value;
					if ((value != null))
					{
						value.PayrollDetails.Add(this);
						this._PayrollID = value.PayrollID;
					}
					else
					{
						this._PayrollID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Payroll");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.PayrollDetail = this;
		}
		
		private void detach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.PayrollDetail = null;
		}
		
		private void attach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.PayrollDetail = this;
		}
		
		private void detach_Contributions(Contribution entity)
		{
			this.SendPropertyChanging();
			entity.PayrollDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayrollGroup")]
	public partial class PayrollGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PayrollGroupID;
		
		private string _Name;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Payroll> _Payrolls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayrollGroupIDChanging(int value);
    partial void OnPayrollGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PayrollGroup()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Payrolls = new EntitySet<Payroll>(new Action<Payroll>(this.attach_Payrolls), new Action<Payroll>(this.detach_Payrolls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayrollGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PayrollGroupID
		{
			get
			{
				return this._PayrollGroupID;
			}
			set
			{
				if ((this._PayrollGroupID != value))
				{
					this.OnPayrollGroupIDChanging(value);
					this.SendPropertyChanging();
					this._PayrollGroupID = value;
					this.SendPropertyChanged("PayrollGroupID");
					this.OnPayrollGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayrollGroup_Employee", Storage="_Employees", ThisKey="PayrollGroupID", OtherKey="EmployeeGroupID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayrollGroup_Payroll", Storage="_Payrolls", ThisKey="PayrollGroupID", OtherKey="PayrollGroupID")]
		public EntitySet<Payroll> Payrolls
		{
			get
			{
				return this._Payrolls;
			}
			set
			{
				this._Payrolls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.PayrollGroup = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.PayrollGroup = null;
		}
		
		private void attach_Payrolls(Payroll entity)
		{
			this.SendPropertyChanging();
			entity.PayrollGroup = this;
		}
		
		private void detach_Payrolls(Payroll entity)
		{
			this.SendPropertyChanging();
			entity.PayrollGroup = null;
		}
	}
}
#pragma warning restore 1591
